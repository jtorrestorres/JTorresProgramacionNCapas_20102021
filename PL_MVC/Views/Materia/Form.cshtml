@model ML.Materia
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
<link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Materia</h2>
            <h5>Ingrese los datos de la materia:</h5>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>


    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Form", "Materia", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            <div class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.IdMateria, new { @class = "hidden" })
                        @Html.TextBoxFor(model => model.IdMateria, new { @class = "hidden form-control", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.IdMateria)
                        @*hidden*@
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Nombre, new { @class = "", @id = "lblNombre" })
                        @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @id = "txtNombre", @onkeypress = "return SoloLetras(this)" })
                        @Html.LabelFor(model => model.Nombre, new { @class = "text-danger hidden", @id = "lblErrorNombre" })

                        @*@Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger", @onkeypress="return SoloLetras(this)"} )*@
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Descripcion, new { @class = "", @id = "lblDescripcion" })
                        @Html.TextBoxFor(model => model.Descripcion, new { @class = "form-control", @id = "txtDescripcion", @onkeypress = "return SoloLetras(this)" })
                        @Html.LabelFor(model => model.Descripcion, new { @class = "text-danger", @style="display:none", @id = "lblErrorDescripcion" })

                        @*@Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger", @onkeypress="return SoloLetras(this)"} )*@
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Creditos)
                        @Html.TextBoxFor(model => model.Creditos, "{0:#.#}", new { @class = "form-control txtCreditosClase", @id = "txtCreditos", @onkeypress = "return SoloNumeros(event)", @onblur = "VerificarRango()" })
                        @Html.ValidationMessageFor(model => model.Creditos, null, new { @class = "text-danger" })
                        @Html.LabelFor(model => model.Nombre, new { @class = "text-danger", @style = "display:none", @id = "lblErrorCreditos" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Costo)
                        @Html.TextBoxFor(model => model.Costo, "{0:#.#}", new { @class = "form-control txtCreditosClase" })
                        @Html.ValidationMessageFor(model => model.Costo, null, new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Semestre)
                        @Html.DropDownListFor(model => model.Semestre.IdSemestre, new SelectList(Model.Semestre.Semestres, "IdSemestre", "Nombre"), "Selecciona una opción", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Semestre.IdSemestre)
                    </div>
                </div>

                @*lbl txt btn*@
                <div class="form-group">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.FechaRegistro)

                        <div class="form-inline">
                            @Html.TextBoxFor(model => model.FechaRegistro, new { @class = "form-control", @id = "txtFechaRegistro" })

                        </div>
                        @Html.ValidationMessageFor(model => model.FechaRegistro)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Imagen)
                        <input type="file" name="ImagenData" onchange="Previsualizar(this);">
                        @if (Model.Imagen != null)
                        {

                            <img id="ImagenPreview" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)" width="100" height="100" />
                        }
                        else
                        {
                            <img id="ImagenPreview" src="~/img/imagenDefault.png" style=" height:150px; width:150px;" />
                        }
                        @Html.ValidationMessageFor(model => model.Imagen)
                    </div>

                </div>

                @Html.HiddenFor(model => model.Imagen)



                <div class="form-group">
                    <div class="col-md-3">
                        <input type="submit" value="Guardar" class="btn btn-success" />
                        @Html.ActionLink("Regresar", "GetAll", "Materia", htmlAttributes: new { @class = "btn btn-danger" })
                    </div>
                </div>
            </div>

            }


        </div>
    </div>
</div>

<script type="text/javascript">

    function Previsualizar(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#ImagenPreview').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    var j = jQuery.noConflict();

    j(function () {
        j("#txtFechaRegistro").datepicker({
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImage: "../img/calendar.png",
            buttonImageOnly: true,
            changeMonth: true,
            changeYear: true

        });
        $(".ui-datepicker-trigger").css("width", "30px");
        $(".ui-datepicker-trigger").css("height", "30px");
    });


    //function SoloLetras(e) {
    //    var letra = e.onkeypress.arguments[0].key;
    //    if (!/[^a-zA-Z]/.test(letra)) {
    //        return true;
    //    }
    //    else {
    //        alert('Solo se aceptan letras');
    //        return false;
    //    }
    //}
    function VerificarRango() {
        //Selectores en CSS/jQuery
        var txtCreditos = document.getElementById("txtCreditos");//.value//JavaScript (1)
        var txtCreditos1 = document.getElementsByClassName("txtCreditosClase");//JavaScript (2)

        var txtCreditos2 = $("#txtCreditos").val();
        var txtCreditos3 = $(".txtCreditosClase").val();

        if (!(txtCreditos.value >= 1 && txtCreditos.value <= 100)) {
                $("#lblErrorCreditos").text('El valor de los créditos debe de estar entre un rango de 1 y 1000');
                $('#lblErrorCreditos').css('display', 'block');
        }


        

    }
    
    function SoloLetras(e) {
        var letra = e.onkeypress.arguments[0].key;
        if (!/[^a-zA-Z]/.test(letra)) {
            $("#lblErrorNombre").hide();
            return true;
        }
        else {

            if (e.id == "txtNombre") {
                $("#lblErrorNombre").text('Solo se aceptan letras');
                $("#lblErrorNombre").show();
            }
            else
                if (e.id == "txtDescripcion") {
                    $("#lblErrorDescripcion").text('Solo se aceptan letras');
                    $('#lblErrorDescripcion').css('display', 'block');
                //    $("#lblErrorNombre").show();
                }
                else
                    if (e.id == "ApellidoMaterno") {
                        $("#lblErrorApellidoMaterno").text('Solo se aceptan letras');
                        $("#lblErrorNombre").show();
                    }
            return false;
        }
    }


    function SoloNumeros(e) {
        //var letra = e.key;
        var letra = e.key;
        if (!/[^0-9]/g.test(letra)) {
            return true;
        }
        else {
            alert('Solo se aceptan numeros');
            return false;
        }
    }

    //email on blur





    
</script>